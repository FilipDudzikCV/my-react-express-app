import { useState, useEffect } from 'react';

const styles = {
  container: {
    minHeight: '100vh',
    backgroundColor: '#f3f4f6',
    display: 'flex',
    flexDirection: 'column',
  },
  header: {
    backgroundColor: '#fff',
    boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
  },
  headerContent: {
    maxWidth: 1024,
    margin: '0 auto',
    padding: '12px 16px',
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  logo: {
    display: 'flex',
    alignItems: 'center',
    gap: 8,
    color: '#4f46e5', // indigo-600
    fontWeight: '700',
    fontSize: 20,
  },
  navButtons: {
    display: 'flex',
    gap: 12,
  },
  navButton: (active) => ({
    padding: '6px 12px',
    borderRadius: 6,
    cursor: 'pointer',
    backgroundColor: active ? '#c7d2fe' : 'transparent', // indigo-100 or transparent
    color: active ? '#3730a3' : '#374151', // indigo-700 or gray-700
    border: 'none',
    fontSize: 14,
  }),
  searchBarWrapper: {
    backgroundColor: '#eef2ff', // indigo-50
    padding: 16,
  },
  searchInput: {
    maxWidth: 768,
    width: '100%',
    padding: '12px 12px 12px 36px',
    borderRadius: 6,
    border: '1px solid #d1d5db',
    fontSize: 16,
    outline: 'none',
    position: 'relative',
  },
  searchIcon: {
    position: 'absolute',
    left: 12,
    top: '50%',
    transform: 'translateY(-50%)',
    pointerEvents: 'none',
    color: '#9ca3af',
  },
  mainContent: {
    flexGrow: 1,
    maxWidth: 1024,
    margin: '0 auto',
    padding: 16,
  },
  gridCategories: {
    display: 'grid',
    gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))',
    gap: 12,
    marginBottom: 24,
  },
  categoryButton: {
    backgroundColor: '#f3f4f6',
    padding: 16,
    borderRadius: 10,
    cursor: 'pointer',
    textAlign: 'center',
    border: 'none',
    transition: 'background-color 0.2s ease',
  },
  categoryButtonHover: {
    backgroundColor: '#e0e7ff',
  },
  gridItems: {
    display: 'grid',
    gridTemplateColumns: 'repeat(auto-fit, minmax(240px, 1fr))',
    gap: 24,
  },
  itemCard: {
    backgroundColor: '#fff',
    borderRadius: 10,
    boxShadow: '0 1px 6px rgba(0,0,0,0.1)',
    overflow: 'hidden',
    cursor: 'pointer',
    transition: 'transform 0.3s ease, box-shadow 0.3s ease',
  },
  itemCardHover: {
    transform: 'scale(1.05)',
    boxShadow: '0 8px 20px rgba(0,0,0,0.15)',
  },
  itemImage: {
    width: '100%',
    height: 180,
    objectFit: 'cover',
  },
  itemDetails: {
    padding: 16,
  },
  itemName: {
    fontWeight: '700',
    fontSize: 18,
    marginBottom: 6,
  },
  itemPrice: {
    color: '#4f46e5',
    fontWeight: '600',
  },
  itemMeta: {
    display: 'flex',
    justifyContent: 'space-between',
    marginTop: 8,
    fontSize: 12,
    color: '#6b7280', // gray-500
  },
  formGroup: {
    marginBottom: 16,
  },
  label: {
    display: 'block',
    marginBottom: 4,
    fontWeight: '600',
    fontSize: 14,
    color: '#374151',
  },
  input: {
    width: '100%',
    padding: 8,
    fontSize: 16,
    borderRadius: 6,
    border: '1px solid #d1d5db',
  },
  textarea: {
    width: '100%',
    padding: 8,
    fontSize: 16,
    borderRadius: 6,
    border: '1px solid #d1d5db',
    resize: 'vertical',
  },
  buttonPrimary: {
    width: '100%',
    backgroundColor: '#4f46e5',
    color: '#fff',
    padding: '10px 0',
    borderRadius: 6,
    fontWeight: '600',
    fontSize: 16,
    cursor: 'pointer',
    border: 'none',
    transition: 'background-color 0.2s ease',
  },
  buttonPrimaryHover: {
    backgroundColor: '#4338ca',
  },
  messageCard: {
    backgroundColor: '#fff',
    padding: 16,
    borderRadius: 10,
    boxShadow: '0 1px 6px rgba(0,0,0,0.1)',
  },
  messageHeader: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'start',
  },
  messageUser: {
    fontWeight: '700',
    marginBottom: 6,
  },
  messageText: {
    color: '#374151',
  },
  messageTime: {
    fontSize: 10,
    color: '#9ca3af',
  },
  profileContainer: {
    padding: 16,
  },
  profileAvatar: {
    width: 96,
    height: 96,
    borderRadius: '50%',
    backgroundColor: '#c7d2fe',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 16,
  },
  profileName: {
    fontWeight: '700',
    fontSize: 20,
  },
  profileLocation: {
    color: '#6b7280',
  },
  profileAdsContainer: {
    backgroundColor: '#fff',
    padding: 16,
    borderRadius: 10,
    boxShadow: '0 1px 6px rgba(0,0,0,0.1)',
    marginBottom: 16,
  },
  profileSettingsList: {
    backgroundColor: '#fff',
    padding: 16,
    borderRadius: 10,
    boxShadow: '0 1px 6px rgba(0,0,0,0.1)',
  },
  profileSettingsItem: {
    padding: 8,
    cursor: 'pointer',
    color: '#374151',
    fontWeight: '600',
  },
  profileSettingsItemHover: {
    color: '#4f46e5',
  },
};

const App = () => {
  const [activeTab, setActiveTab] = useState('home');
  const [searchQuery, setSearchQuery] = useState('');
  const [items, setItems] = useState([
    {
      id: 1,
      name: "Kurtka zimowa",
      price: "299 zł",
      image: "https://placehold.co/400x300?text=Kurtka+zimowa",
      category: "Odzież",
      location: "Warszawa"
    },
    {
      id: 2,
      name: "Buty sportowe Nike",
      price: "199 zł",
      image: "https://placehold.co/400x300?text=Buty+sportowe+Nike",
      category: "Obuwie",
      location: "Kraków"
    },
    {
      id: 3,
      name: "Torebka markowa",
      price: "450 zł",
      image: "https://placehold.co/400x300?text=Torebka+markowa",
      category: "Akcesoria",
      location: "Wrocław"
    },
    {
      id: 4,
      name: "Zegarek damski",
      price: "320 zł",
      image: "https://placehold.co/400x300?text=Zegarek+damski",
      category: "Biżuteria",
      location: "Gdańsk"
    },
    {
      id: 5,
      name: "Okulary przeciwsłoneczne",
      price: "120 zł",
      image: "https://placehold.co/400x300?text=Okulary+przeciwsłoneczne",
      category: "Akcesoria",
      location: "Poznań"
    },
    {
      id: 6,
      name: "Spodnie dżinsowe",
      price: "149 zł",
      image: "https://placehold.co/400x300?text=Spodnie+dżinsowe",
      category: "Odzież",
      location: "Łódź"
    }
  ]);
  const [filteredItems, setFilteredItems] = useState(items);
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [hoveredItemId, setHoveredItemId] = useState(null);

  const categories = [
    { id: "all", label: "Wszystkie" },
    { id: "odziez", label: "Odzież" },
    { id: "obuwie", label: "Obuwie" },
    { id: "akcesoria", label: "Akcesoria" },
    { id: "bizuteria", label: "Biżuteria" },
  ];

  const [activeCategory, setActiveCategory] = useState('all');

  useEffect(() => {
    let filtered = items;

    if (activeCategory !== 'all') {
      filtered = filtered.filter(i =>
        i.category.toLowerCase() === activeCategory
      );
    }

    if (searchQuery.trim() !== '') {
      filtered = filtered.filter(i =>
        i.name.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    setFilteredItems(filtered);
  }, [items, searchQuery, activeCategory]);

  const renderContent = () => {
    switch (activeTab) {
      case 'home':
        return (
          <>
            <div style={styles.gridCategories}>
              {categories.map(cat => (
                <button
                  key={cat.id}
                  style={{
                    ...styles.categoryButton,
                    backgroundColor:
                      activeCategory === cat.id ? '#e0e7ff' : '#f3f4f6',
                    color: activeCategory === cat.id ? '#3730a3' : '#374151',
                    fontWeight: activeCategory === cat.id ? '700' : '400',
                  }}
                  onClick={() => setActiveCategory(cat.id)}
                >
                  {cat.label}
                </button>
              ))}
            </div>
            <div style={styles.gridItems}>
              {filteredItems.map(item => (
                <div
                  key={item.id}
                  style={{
                    ...styles.itemCard,
                    ...(hoveredItemId === item.id ? styles.itemCardHover : {}),
                  }}
                  onMouseEnter={() => setHoveredItemId(item.id)}
                  onMouseLeave={() => setHoveredItemId(null)}
                >
                  <img
                    src={item.image}
                    alt={item.name}
                    style={styles.itemImage}
                  />
                  <div style={styles.itemDetails}>
                    <div style={styles.itemName}>{item.name}</div>
                    <div style={styles.itemPrice}>{item.price}</div>
                    <div style={styles.itemMeta}>
                      <div>{item.category}</div>
                      <div>{item.location}</div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </>
        );
      case 'sell':
        return (
          <SellForm onAddItem={(newItem) => setItems([newItem, ...items])} />
        );
      case 'messages':
        return (
          <Messages />
        );
      case 'profile':
        return (
          <Profile />
        );
      default:
        return null;
    }
  };

  return (
    <div style={styles.container}>
      <header style={styles.header}>
        <div style={styles.headerContent}>
          <div style={styles.logo}>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              strokeWidth={1.5}
              stroke="#4f46e5"
              style={{ width: 24, height: 24 }}
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M15.75 6a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0z"
              />
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M4.501 20.118a7.5 7.5 0 0114.998 0"
              />
            </svg>
            <span>Ogłoszenia</span>
          </div>
          <nav style={styles.navButtons}>
            <button
              onClick={() => setActiveTab('home')}
              style={styles.navButton(activeTab === 'home')}
              type="button"
            >
              Strona główna
            </button>
            <button
              onClick={() => setActiveTab('sell')}
              style={styles.navButton(activeTab === 'sell')}
              type="button"
            >
              Sprzedaj
            </button>
            <button
              onClick={() => setActiveTab('messages')}
              style={styles.navButton(activeTab === 'messages')}
              type="button"
            >
              Wiadomości
            </button>
            <button
              onClick={() => setActiveTab('profile')}
              style={styles.navButton(activeTab === 'profile')}
              type="button"
            >
              Profil
            </button>
          </nav>
        </div>
      </header>

      {activeTab === 'home' && (
        <div style={{ position: 'relative', ...styles.searchBarWrapper }}>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            stroke="#9ca3af"
            viewBox="0 0 24 24"
            strokeWidth={1.5}
            style={{
              width: 24,
              height: 24,
              position: 'absolute',
              left: 16,
              top: '50%',
              transform: 'translateY(-50%)',
              pointerEvents: 'none',
            }}
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              d="M21 21l-4.35-4.35m0 0A7.5 7.5 0 113.75 10.5a7.5 7.5 0 0112.9 6.15z"
            />
          </svg>
          <input
            type="text"
            placeholder="Szukaj ogłoszeń"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            style={styles.searchInput}
          />
        </div>
      )}

      <main style={styles.mainContent}>{renderContent()}</main>
    </div>
  );
};

const SellForm = ({ onAddItem }) => {
  const [name, setName] = useState('');
  const [price, setPrice] = useState('');
  const [category, setCategory] = useState('odziez');
  const [location, setLocation] = useState('');
  const [imageUrl, setImageUrl] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!name || !price || !category || !location) {
      alert('Wypełnij wszystkie pola');
      return;
    }

    const newItem = {
      id: Date.now(),
      name,
      price,
      category,
      location,
      image: imageUrl || 'https://placehold.co/400x300?text=Brak+zdjęcia',
    };

    onAddItem(newItem);
    setName('');
    setPrice('');
    setCategory('odziez');
    setLocation('');
    setImageUrl('');
    alert('Dodano ogłoszenie!');
  };

  return (
    <form onSubmit={handleSubmit}>
      <div style={styles.formGroup}>
        <label htmlFor="name" style={styles.label}>Nazwa produktu</label>
        <input
          id="name"
          type="text"
          value={name}
          onChange={(e) => setName(e.target.value)}
          style={styles.input}
        />
      </div>
      <div style={styles.formGroup}>
        <label htmlFor="price" style={styles.label}>Cena</label>
        <input
          id="price"
          type="text"
          value={price}
          onChange={(e) => setPrice(e.target.value)}
          style={styles.input}
        />
      </div>
      <div style={styles.formGroup}>
        <label htmlFor="category" style={styles.label}>Kategoria</label>
        <select
          id="category"
          value={category}
          onChange={(e) => setCategory(e.target.value)}
          style={styles.input}
        >
          <option value="odziez">Odzież</option>
          <option value="obuwie">Obuwie</option>
          <option value="akcesoria">Akcesoria</option>
          <option value="bizuteria">Biżuteria</option>
        </select>
      </div>
      <div style={styles.formGroup}>
        <label htmlFor="location" style={styles.label}>Lokalizacja</label>
        <input
          id="location"
          type="text"
          value={location}
          onChange={(e) => setLocation(e.target.value)}
          style={styles.input}
        />
      </div>
      <div style={styles.formGroup}>
        <label htmlFor="imageUrl" style={styles.label}>URL zdjęcia (opcjonalnie)</label>
        <input
          id="imageUrl"
          type="text"
          value={imageUrl}
          onChange={(e) => setImageUrl(e.target.value)}
          style={styles.input}
        />
      </div>
      <button type="submit" style={styles.buttonPrimary}>Dodaj ogłoszenie</button>
    </form>
  );
};

const Messages = () => {
  // przykładowe wiadomości
  const messages = [
    {
      id: 1,
      user: "Jan Kowalski",
      message: "Czy produkt jest nadal dostępny?",
      time: "2 godziny temu",
    },
    {
      id: 2,
      user: "Anna Nowak",
      message: "Jaka jest cena za większą ilość?",
      time: "wczoraj",
    },
  ];

  return (
    <div>
      {messages.map(m => (
        <div key={m.id} style={styles.messageCard}>
          <div style={styles.messageHeader}>
            <div style={styles.messageUser}>{m.user}</div>
            <div style={styles.messageTime}>{m.time}</div>
          </div>
          <div style={styles.messageText}>{m.message}</div>
        </div>
      ))}
    </div>
  );
};

const Profile = () => {
  return (
    <div style={styles.profileContainer}>
      <div style={styles.profileAvatar}>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          stroke="#4f46e5"
          viewBox="0 0 24 24"
          strokeWidth={1.5}
          style={{ width: 48, height: 48 }}
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            d="M15.75 6a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0z"
          />
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            d="M4.5 20.118a7.5 7.5 0 0115 0"
          />
        </svg>
      </div>
      <div style={styles.profileName}>Jan Kowalski</div>
      <div style={styles.profileLocation}>Warszawa</div>
      <div style={{ marginTop: 20 }}>
        <div style={styles.profileAdsContainer}>
          <h3>Moje ogłoszenia</h3>
          <p>Brak ogłoszeń</p>
        </div>
        <div style={styles.profileSettingsList}>
          <div style={styles.profileSettingsItem}>Ustawienia konta</div>
          <div style={styles.profileSettingsItem}>Wyloguj się</div>
        </div>
      </div>
    </div>
  );
};

export default App;
